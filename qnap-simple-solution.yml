services:
  weather-monitor:
    image: python:3.11-slim
    container_name: weather-alert-monitor
    ports:
      - "8000:8000"
    volumes:
      # Mount only the data persistence
      - /Public/weather-monitor/data/database.json:/app/database.json
      - /Public/weather-monitor/backups:/app/backups
    working_dir: /app
    environment:
      - FLASK_ENV=production
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    command: >
      sh -c "pip install --no-cache-dir Flask flask_cors && echo 'Creating server.py...' && cat > server.py << 'EOF'
#!/usr/bin/env python3
from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import json
import os
from datetime import datetime
import uuid

app = Flask(__name__)
CORS(app)

DATABASE_FILE = 'database.json'

def load_database():
    try:
        with open(DATABASE_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {'locations': [], 'lastUpdated': None}

def save_database(data):
    data['lastUpdated'] = datetime.now().isoformat()
    with open(DATABASE_FILE, 'w') as f:
        json.dump(data, f, indent=2)

@app.route('/')
def index():
    return send_from_directory('.', 'index.html')

@app.route('/<path:filename>')
def serve_static(filename):
    return send_from_directory('.', filename)

@app.route('/api/locations', methods=['GET'])
def get_locations():
    try:
        data = load_database()
        return jsonify(data['locations'])
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/locations', methods=['POST'])
def add_location():
    try:
        data = load_database()
        location_data = request.json
        location_data['id'] = f'loc_{uuid.uuid4().hex[:8]}'
        location_data['lastUpdated'] = datetime.now().isoformat()
        data['locations'].append(location_data)
        save_database(data)
        return jsonify(location_data), 201
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/locations/<location_id>', methods=['PUT'])
def update_location(location_id):
    try:
        data = load_database()
        location_data = request.json
        for i, location in enumerate(data['locations']):
            if location['id'] == location_id:
                location_data['id'] = location_id
                location_data['lastUpdated'] = datetime.now().isoformat()
                data['locations'][i] = location_data
                save_database(data)
                return jsonify(location_data)
        return jsonify({'error': 'Location not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/locations/<location_id>', methods=['DELETE'])
def delete_location(location_id):
    try:
        data = load_database()
        for i, location in enumerate(data['locations']):
            if location['id'] == location_id:
                deleted_location = data['locations'].pop(i)
                save_database(data)
                return jsonify(deleted_location)
        return jsonify({'error': 'Location not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/locations/bulk', methods=['PUT'])
def update_locations_bulk():
    try:
        data = load_database()
        locations_data = request.json
        for location_data in locations_data:
            for i, location in enumerate(data['locations']):
                if location['id'] == location_data['id']:
                    location_data['lastUpdated'] = datetime.now().isoformat()
                    data['locations'][i] = location_data
                    break
        save_database(data)
        return jsonify({'message': 'Locations updated successfully'})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/database', methods=['GET'])
def get_database_info():
    try:
        data = load_database()
        return jsonify({
            'totalLocations': len(data['locations']),
            'lastUpdated': data['lastUpdated']
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    print('Starting Weather Alert Monitor Server...')
    print('Server will be available at: http://localhost:8000')
    app.run(host='0.0.0.0', port=8000, debug=True, use_reloader=False)
EOF
      && echo 'Creating index.html...' && cat > index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather Alert Monitor</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div id="app">
        <h1>Weather Alert Monitor</h1>
        <p>Server is running successfully!</p>
        <p>Your weather monitoring application is now deployed on QNAP.</p>
    </div>
</body>
</html>
EOF
      && echo 'Creating styles.css...' && cat > styles.css << 'EOF'
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 20px;
    background-color: #f0f0f0;
}

#app {
    max-width: 800px;
    margin: 0 auto;
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

h1 {
    color: #333;
    text-align: center;
}
EOF
      && echo 'Starting server...' && python server.py" 